이번시간에는 axios instance에 대해서 다뤄보자. 
이번에는 휴먼에러 및 반복되는 값을 쉽게 수정하는 방법이다. 만약, 서버의 주소가 변경되었을 때, 일일이 번경해 준다고 생각해보자. 
이는 인적리소스가 될 것이다. 이를 공통적으로 처리할 수 없을까? 

그것이 interceptors 이다. 

# 01
  .env 파일을 만들어서 헨들링 해보겠습니다. 
  이를 환경변수라고 합니다. 

# 02
  순수한 axios => instance를 가공해봅시다.   
  axios 폴더 => api.js
  // 해당 내용까지를 src => 강의내용 => App-instance까지로 옴겼고, 이후의 작업을
  // App.js에서 다시 실행하자. 

# 03
  interceptors 를 통해서 응답과 요청 사이를 관여해보겠습니다. 
  api.js 로 가서 instance 에 요청시와 응답시를 구분해서 접근해보겠습니다. 

      instance.interceptors.request.use(
          function () {},  // 요청을 보내기 전 수행되는 함수
          function () {},  // 오류 요청을 보내기 전 수행되는 함수
      )
      instance.interceptors.response.use(
          function () {},  // 응답을 보내기 전 수행되는 함수
          function () {},  // 오류 응답을 보내기 전 수행되는 함수
      )

  위의 선언이 기본적인 것입니다. 즉 요청시에, 응답시에 수행할 로직들이 들어갑니다.   

# 03-01 요청시 
      instance.interceptors.request.use(
      function (config) {
        console.log("인터셉터 요청 성공!")
        return config                 // 요청받은 config를 반환해 줍니다. 
      },
      function (error) {
        console.log("인터셉터 요청 오류!")
        return Promise.reject(error)  // 에러객체를 반드시 리턴해주어야 합니다. 
      },
    )

# 03-03
  강제로 오류를 발생시켜봅시다. 
  instance 에 발생될 매서드가 있습니다.  timeout: 밀리세컨초 를 통해서 이를 실행할 수 있는데
  instance 식별자 안에 말도 안되는 시간 0.001초를 설정해봅시다. 
  콘솔을 보면, 요청은 성공(콘솔 "인터셉터 요청 성공!")했지만, 응답은 실패(콘솔 "인터셉터 응답 오류!")와 프로미스로 에러 객체를 받을 수 있습니다. 
